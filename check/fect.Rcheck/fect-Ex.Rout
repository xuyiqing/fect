
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fect"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "fect-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('fect')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("did_wrapper")
> ### * did_wrapper
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: did_wrapper
> ### Title: A Multi-Method Difference-in-Differences Estimator
> ### Aliases: did_wrapper
> 
> ### ** Examples
> 
> ## Not run: 
> ##D result_twfe <- did_wrapper(
> ##D   data   = df,
> ##D   Y      = "outcome",
> ##D   D      = "treat",
> ##D   index  = c("id", "time"),
> ##D   method = "twfe"
> ##D )
> ##D result_twfe$est.avg
> ##D result_twfe$est.att
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("did_wrapper", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("effect")
> ### * effect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: effect
> ### Title: Calculate Cumulative or Sub-group Treatment Effects
> ### Aliases: effect
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Fit fect model with bootstrap
> ##D fit <- fect(Y ~ D + X, data = panel_data, keep.sims = TRUE)
> ##D 
> ##D # Calculate cumulative effects for all treated units
> ##D results <- effect(fit)
> ##D 
> ##D # Calculate period-specific effects for specific units
> ##D results_specific <- effect(fit,
> ##D                           cumu = FALSE,
> ##D                           id = c("unit1", "unit2"),
> ##D                           period = c(1, 4))
> ##D 
> ##D # View results
> ##D print(results$est.catt)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("effect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("esplot")
> ### * esplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: esplot
> ### Title: Event Study Visualization
> ### Aliases: esplot
> 
> ### ** Examples
> 
> # Basic example with simulated data
> set.seed(123)
> event_data <- data.frame(
+   time = -5:5,
+   ATT = cumsum(rnorm(11, 0, 0.2)) + c(rep(0,5), 0, 0.5, 1, 1.2, 1.5, 1.3),
+   SE = runif(11, 0.1, 0.3)
+ )
> event_data$CI.lower <- event_data$ATT - 1.96 * event_data$SE
> event_data$CI.upper <- event_data$ATT + 1.96 * event_data$SE
> event_data$count <- sample(50:150, 11, replace = TRUE)
> event_data$count[event_data$time == -5 | event_data$time == 5] <- 20 # for proportion demo
> 
> # Default plot (point-range)
> esplot(event_data, Period = "time", Estimate = "ATT",
+        CI.lower = "CI.lower", CI.upper = "CI.upper")
> 
> # Connected plot with ribbon
> esplot(event_data, Period = "time", Estimate = "ATT",
+        CI.lower = "CI.lower", CI.upper = "CI.upper",
+        connected = TRUE, show.points = TRUE)
> 
> # Connected plot using SE for CI calculation
> event_data_no_ci <- event_data[, c("time", "ATT", "SE", "count")]
> esplot(event_data_no_ci, Period = "time", Estimate = "ATT", SE = "SE",
+        connected = TRUE, ci.outline = TRUE, color = "blue")
Column 'CI.lower' not found in input data. Calculating values for 'CI.lower' using 'ATT' and 'SE'.
Column 'CI.upper' not found in input data. Calculating values for 'CI.upper' using 'ATT' and 'SE'.
> 
> # Show count bars and stats
> esplot(event_data, Period = "time", Estimate = "ATT",
+        CI.lower = "CI.lower", CI.upper = "CI.upper", Count = "count",
+        show.count = TRUE, stats = c(0.03, 0.12), stats.labs = c("P-val Pre", "P-val Post"),
+        main = "Event Study with Counts and Stats", proportion = 0.2)
> 
> # Highlight specific periods (connected)
> esplot(event_data, Period = "time", Estimate = "ATT", SE = "SE",
+        connected = TRUE, highlight.periods = c(-1, 2),
+        highlight.colors = c("orange", "green"),
+        main = "Highlighted Periods (Connected)")
> 
> # Highlight specific periods (point-range)
> esplot(event_data, Period = "time", Estimate = "ATT", SE = "SE",
+        connected = FALSE, highlight.periods = c(-1, 2),
+        highlight.colors = c("orange", "green"),
+        main = "Highlighted Periods (Point-Range)")
> 
> # Only post-treatment period, custom labels
> esplot(event_data, Period = "time", Estimate = "ATT", SE = "SE",
+        only.post = TRUE, xlab = "Years Post-Intervention", ylab = "Impact Metric",
+        start0 = TRUE, color = "darkred", est.lwidth = 1.5)
> 
> # Using did_wrapper object (conceptual example, requires `did` package and setup)
> # if (requireNamespace("did", quietly = TRUE)) {
> #   # Assume `did_out` is an output from `did::att_gt` or similar
> #   # and `did_wrapper_obj` is created, e.g.,
> #   # did_wrapper_obj <- list(est.att = event_data) # Simplified for example
> #   # class(did_wrapper_obj) <- "did_wrapper"
> #   # esplot(did_wrapper_obj) # Would use defaults: Period="time", Estimate="ATT"
> # }
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("esplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fect")
> ### * fect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fect
> ### Title: Fixed Effects Counterfactual Estimators
> ### Aliases: fect
> 
> ### ** Examples
> 
> library(fect)
> data(fect)
> out <- fect(Y ~ D + X1 + X2, data = simdata,
+             index = c("id","time"), force = "two-way",
+             CV = TRUE, r = c(0, 5), se = 0, parallel = FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fect_sens")
> ### * fect_sens
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fect_sens
> ### Title: Sensitivity Analysis for fect Objects under Relative Magnitude
> ###   and Smoothness Restrictions
> ### Aliases: fect_sens
> 
> ### ** Examples
> 
> ## Not run: 
> ##D out <- fect(Y ~ D, data = df, index = c("unit", "time"), method = "fe", se = TRUE)
> ##D out_sens <- fect_sens(
> ##D   fect.out = out,
> ##D   post.periods = c(1, 2, 3, 4),
> ##D   Mbarvec = seq(0, 1, by = 0.2),
> ##D   Mvec = c(0, 0.05, 0.1),
> ##D   periodMbarvec = c(0, 0.5),
> ##D   periodMvec = c(0, 0.1)
> ##D )
> ##D names(out_sens$sensitivity.rm)
> ##D names(out_sens$sensitivity.smooth)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fect_sens", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("interFE")
> ### * interFE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: interFE
> ### Title: Interactive Fixed Effects Models
> ### Aliases: interFE
> 
> ### ** Examples
> 
> library(fect)
> data(fect)
> d <- simdata[-(1:150),] # remove the treated units
> out <- interFE(Y ~ X1 + X2, data = d, index=c("id","time"),
+                r = 2, force = "two-way", nboots = 50)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("interFE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.fect")
> ### * plot.fect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.fect
> ### Title: Plot Method for 'fect' Objects
> ### Aliases: plot.fect
> 
> ### ** Examples
> 
> library(fect)
> # For CRAN checks, use a small number of bootstraps
> # In practice, use a larger number (e.g., nboots = 200 or more)
> if(requireNamespace("ggplot2") && requireNamespace("ggrepel")) {
+   data(simdata)
+   # Estimate with fixed effects method
+   out.fect <- fect(
+     Y ~ D + X1 + X2,
+     data = simdata,
+     index = c("id","time"),
+     method = "fe",
+     force = "two-way",
+     se = TRUE,
+     parallel = FALSE,
+     nboots = 5 # nboots low for example
+   )
+ 
+   # Default gap plot
+   plot(out.fect, main = "Estimated ATT (FEct)", ylab = "Effect of D on Y")
+ 
+   # Gap plot with vibrant preset and custom line color
+   # plot(out.fect, preset = "vibrant", color = "darkgreen",
+   #      main = "Estimated ATT (Vibrant Preset, Custom Line)")
+ 
+   # Counterfactual plot for the first treated unit
+   # Need to know the ID of a treated unit. Let's find one.
+   treated_ids <- unique(simdata$id[simdata$D == 1])
+   if (length(treated_ids) > 0) {
+     plot(out.fect, type = "counterfactual", id = treated_ids[1],
+          main = paste("Counterfactual for Unit", treated_ids[1]))
+   }
+ 
+   # Status plot
+   plot(out.fect, type = "status")
+ 
+   # Cumulative effect plot (if est.eff is available from fect call)
+   # This example might not have it by default, but showing how to call
+   # out.fect.cumul <- fect(Y ~ D, data = simdata, index = c("id","time"), method = "fe",
+   #                        cumulative = TRUE, se = TRUE, parallel = FALSE, nboots = 5)
+   # if (exists("out.fect.cumul")) {
+   #   plot(out.fect.cumul, type = "cumul", main = "Cumulative ATT")
+   # }
+ 
+   # Example for sensitivity plot (requires IFE/GSYNTH method and sensitivity analysis)
+   # \donttest{
+   #   out.ife <- fect(Y ~ D, data = simdata, index = c("id","time"),
+   #                   method = "ife", se = TRUE, r = 2,
+   #                   sensitivity.analysis = TRUE, sensitivity.plot = FALSE, # run analysis
+   #                   parallel = FALSE, nboots = 5) # nboots low for example
+   #   if (!is.null(out.ife$sensitivity.rm)) {
+   #     plot(out.ife, type = "sens", restrict = "rm",
+   #          main = "Sensitivity Analysis (Relative Magnitude)")
+   #     plot(out.ife, type = "sens_es", restrict = "rm",
+   #          main = "Event-Study Sensitivity (Relative Magnitude)")
+   #   }
+   # }
+ }
Loading required namespace: ggrepel
Bootstrapping for uncertainties ... 
5 runs



F-test Failed. The estimated covariance matrix is singular.


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.fect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.fect")
> ### * print.fect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.fect
> ### Title: Print Results
> ### Aliases: print.fect
> 
> ### ** Examples
> 
> library(fect)
> data(fect)
> out <- fect(Y ~ D + X1 + X2, data = simdata, 
+             index = c("id","time"), force = "two-way",
+             CV = TRUE, r = c(0, 5), se = 0, parallel = FALSE) 
> print(out)
Call:
fect.formula(formula = Y ~ D + X1 + X2, data = simdata, index = c("id", 
    "time"), force = "two-way", r = c(0, 5), CV = TRUE, se = 0, 
    parallel = FALSE)

ATT:
                            ATT
Tr obs. equally weighted  5.121
Tr units equally weighted 3.622

Covariates:
    Coef
X1 1.015
X2 2.937

Uncertainty estimates not available.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.fect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.interFE")
> ### * print.interFE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.interFE
> ### Title: Print Results
> ### Aliases: print.interFE
> 
> ### ** Examples
> 
> library(fect)
> data(fect)
> d <- simdata[-(1:150),] # remove the treated units
> out <- interFE(Y ~ X1 + X2, data = d, index=c("id","time"),
+                r = 2, force = "two-way", nboots = 50)
> print(out)
Call:

interFE.formula(formula = Y ~ X1 + X2, data = d, index = c("id", 
    "time"), r = 2, force = "two-way", nboots = 50)

Estimated Coefficients:

         [,1]
X1      1.026
X2      2.942
_const 12.749
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.interFE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.418 0.066 1.512 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
